name: Run LRP Report Script Daily

on:
  schedule:
    - cron: "45 20 * * *"
    
  workflow_dispatch:  

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Xvfb for headless browser
        run: |
          sudo apt-get install -y xvfb
          Xvfb :99 -screen 0 1280x1024x24 &
          sleep 5
          export DISPLAY=:99
          echo "Xvfb setup complete"

      - name: Debug Xvfb
        run: |
          ps aux | grep Xvfb || echo "Xvfb is NOT running!"

      - name: Ensure DISPLAY variable is set
        run: echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Check DISPLAY variable
        run: echo "DISPLAY=$DISPLAY"

      - name: Set Up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install selenium google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client gspread openpyxl pandas webdriver_manager    

      - name: Install Chrome v124
        run: |
          wget https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_124.0.6367.91-1_amd64.deb
          sudo apt install -y --allow-downgrades ./google-chrome-stable_124.0.6367.91-1_amd64.deb
     
      - name: Install ChromeDriver v124
        run: |
          wget https://storage.googleapis.com/chrome-for-testing-public/124.0.6367.91/linux64/chromedriver-linux64.zip
          unzip chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
          sudo chmod +x /usr/local/bin/chromedriver
          
      - name: Verify Chrome & ChromeDriver
        run: |
          echo "Google Chrome Version: $(google-chrome --version)"
          echo "ChromeDriver Version: $(chromedriver --version)"

      - name: Check Chrome & ChromeDriver
        run: |
          echo "Chrome version: $(google-chrome --version)"
          echo "ChromeDriver version: $(chromedriver --version)"
          which google-chrome || echo "Google Chrome not found!"
          which chromedriver || echo "ChromeDriver not found!"
        shell: bash

      - name: Test Chrome Headless
        run: |
          google-chrome --headless --disable-gpu --no-sandbox --dump-dom https://www.google.com || echo "Chrome failed to start"

      - name: Create credentials.json from Secret
        run: echo "${{ secrets.GOOGLE_OAUTH_CREDENTIALS_B64 }}" | base64 --decode > credentials.json
        shell: bash

      - name: Debug Secret Access
        run: |
          echo "Checking GOOGLE_OAUTH_CREDENTIALS_B64"
          echo ${{ secrets.GOOGLE_OAUTH_CREDENTIALS_B64 }} | base64 --decode

      - name: Check Google OAuth Secret
        run: |
          if [ -z "$GOOGLE_OAUTH_CREDENTIALS_B64" ]; then
            echo "GOOGLE_OAUTH_CREDENTIALS_B64 is empty!"
            exit 1
          else
            echo "GOOGLE_OAUTH_CREDENTIALS_B64 is set."
          fi
        env:
          GOOGLE_OAUTH_CREDENTIALS_B64: ${{ secrets.GOOGLE_OAUTH_CREDENTIALS_B64 }}

      - name: Create token.json from GitHub Secret
        run: echo "${{ secrets.GOOGLE_OAUTH_TOKEN_B64 }}" | base64 --decode > token.json
 
      - name: Run Unborn Script
        run: | 
          python3 Unborn.py
        env:
          DISPLAY: :99
          GOOGLE_OAUTH_CREDENTIALS_B64: ${{ secrets.GOOGLE_OAUTH_CREDENTIALS_B64 }}

      - name: Run Steers1 Script
        run: |
          python3 Steers1.py
        env:
          DISPLAY: :99
          GOOGLE_OAUTH_CREDENTIALS_B64: ${{ secrets.GOOGLE_OAUTH_CREDENTIALS_B64 }}

      - name: Run Steers2 Script
        run: |
          python3 Steers2.py
        env:
          DISPLAY: :99
          GOOGLE_OAUTH_CREDENTIALS_B64: ${{ secrets.GOOGLE_OAUTH_CREDENTIALS_B64 }}

      - name: Run Heifers1 Script
        run: |
          python3 Heifers1.py
        env:
          DISPLAY: :99
          GOOGLE_OAUTH_CREDENTIALS_B64: ${{ secrets.GOOGLE_OAUTH_CREDENTIALS_B64 }}

      - name: Run Heifers2 Script
        run: |
          python3 Heifers2.py
        env:
          DISPLAY: :99
          GOOGLE_OAUTH_CREDENTIALS_B64: ${{ secrets.GOOGLE_OAUTH_CREDENTIALS_B64 }}

      - name: Run Date Script
        run: |
          python3 MDY.py
        env:
          DISPLAY: :99
          GOOGLE_OAUTH_CREDENTIALS_B64: ${{ secrets.GOOGLE_OAUTH_CREDENTIALS_B64 }}    

  retry-run:
    needs: run-script
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Wait Before Retrying
        run: |
          echo "Waiting 30 minutes before retry..."
          sleep 1800

      - name: Retry Running Scripts (Max 5 Attempts)
        run: |
          MAX_ATTEMPTS=5
          ATTEMPT=1

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS..."
            python3 Unborn.py && python3 Steers1.py && python3 Steers2.py && python3 Heifers1.py && python3 Heifers2.py && break
            echo "Attempt $ATTEMPT failed. Retrying in 30 minutes..."
            sleep 1800
            ATTEMPT=$((ATTEMPT+1))
          done

          if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
            echo "All retry attempts failed."
            exit 1
          fi
        env:
          DISPLAY: :99
          GOOGLE_OAUTH_CREDENTIALS_B64: ${{ secrets.GOOGLE_OAUTH_CREDENTIALS_B64 }}
