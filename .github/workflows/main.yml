name: Run LRP Report Script Daily

on:
  schedule:
    - cron: "0 8 * * *" 
  workflow_dispatch:  

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set Up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install selenium google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client gspread openpyxl pandas webdriver_manager

      - name: Set up Xvfb for headless browser
        run: |
          sudo apt-get install -y xvfb
          Xvfb :99 -screen 0 1280x1024x24 &
          sleep 5
          export DISPLAY=:99
          echo "Xvfb setup complete"

      - name: Set up credentials for Google API
        run: echo "$GOOGLE_CREDENTIALS" > credentials.json
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}    

      - name: Install Google Chrome
        run: |
          sudo apt update
          sudo apt install -y google-chrome-stable

      - name: Detect Chrome Version
        run: |
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d '.' -f 1)
          echo "Detected Chrome version: $CHROME_VERSION"
          echo "CHROME_VERSION=$CHROME_VERSION" >> $GITHUB_ENV

      - name: Get Correct ChromeDriver Version
        run: |
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d '.' -f 1)
          echo "Detected Chrome version: $CHROME_VERSION"
          CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json" | jq -r --arg version "$CHROME_VERSION" '.versions[] | select(.version | startswith($version)) | .version' | head -n 1)
          if [ -z "$CHROMEDRIVER_VERSION" ]; then
            echo "Error: Could not find a matching ChromeDriver version for Chrome $CHROME_VERSION"
            exit 1
          fi

          echo "Matching ChromeDriver version: $CHROMEDRIVER_VERSION"
          wget -q "https://storage.googleapis.com/chrome-for-testing-public/${CHROMEDRIVER_VERSION}/linux64/chromedriver-linux64.zip"
          unzip chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
          sudo chmod +x /usr/local/bin/chromedriver
          rm -rf chromedriver-linux64.zip chromedriver-linux64

      - name: Verify Chrome & ChromeDriver
        run: |
          echo "Google Chrome Version: $(google-chrome --version)"
          echo "ChromeDriver Version: $(chromedriver --version)"

      - name: Start Chrome in Headless Mode
        run: |
          google-chrome --headless --disable-gpu --no-sandbox --disable-dev-shm-usage --dump-dom https://www.google.com || echo "Chrome failed to run"


      - name: Run Script with Debugging
        run: |
          set -x  # Enable debugging output
          python3 Unborn.py || echo "Python script exited with error code $?"
        shell: bash

      - name: Test Chrome Headless Mode
        run: |
          google-chrome --headless --disable-gpu --dump-dom https://www.google.com || echo "Chrome failed to run"
        shell: bash

      - name: Check Chrome & ChromeDriver
        run: |
          echo "Chrome version: $(google-chrome --version)"
          echo "ChromeDriver version: $(chromedriver --version)"
          which google-chrome || echo "Google Chrome not found!"
          which chromedriver || echo "ChromeDriver not found!"
        shell: bash
          
      - name: Run Unborn Script
        run: | 
          python3 Unborn.py
        env:
          DISPLAY: :99

      - name: Run Steers1 Script
        run: |
          python3 Steers1.py
        env:
          DISPLAY: :99

      - name: Run Steers2 Script
        run: |
          python3 Steers2.py
        env:
          DISPLAY: :99

      - name: Run Heifers1 Script
        run: |
          python3 Heifers1.py
        env:
          DISPLAY: :99

      - name: Run Heifers2 Script
        run: |
          python3 Heifers2.py
        env:
          DISPLAY: :99
